name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      pull-requests: write

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: pos_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Auto-fix linting issues
        run: |
          npm run lint:fix || true
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git add .
          git commit -m "style: auto-fix linting issues" || true
          git push || true

      - name: Run ESLint
        run: npm run lint || true

      - name: Start services
        run: |
          docker compose -f docker-compose.yml up -d
          echo "Waiting for MySQL to be ready..."
          timeout 120 bash -c 'until docker compose exec db mysqladmin ping -h localhost -u root -ptest --silent; do sleep 5; echo "Waiting..."; done'

      - name: Verify MySQL
        run: |
          echo "Checking MySQL connection..."
          docker compose exec db mysql -h localhost -u root -ptest -e "SHOW DATABASES;"
          echo "Checking database tables..."
          docker compose exec db mysql -h localhost -u root -ptest pos_db -e "SHOW TABLES;"

      - name: Run unit tests
        run: npm run test:unit

      - name: Run functional tests
        run: npm run test:functional

      - name: Run integration tests
        run: npm run test:integration

      - name: Run end-to-end tests
        run: npm run test:e2e

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage/

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.yml down -v --remove-orphans

      - name: Create dist directory
        run: mkdir -p dist

      - name: Copy source files
        run: |
          cp -r app.js dist/
          cp -r routes dist/
          cp -r models dist/
          cp -r controllers dist/
          cp -r config dist/
          cp package.json dist/
          cp package-lock.json dist/

      - name: Build application
        run: |
          cd dist
          npm ci --production
          cd ..

      - name: Security audit
        run: npm audit || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: dist/

      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la dist/
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi

      - name: Notify completion
        run: |
          echo "CI pipeline completed successfully!"
          echo "Build artifacts are available in the dist/ directory"
          echo "Test coverage report is available in the coverage/ directory"
